using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using FMS.Source.Classes;
using FMS_BusinessObjects;
using Telerik.Web.UI;

namespace FMS.Source.Admin
{
    public partial class User_Roles : System.Web.UI.Page
    {

        public bool isAllowed()
        {
            return false;
        }
        protected void Page_Load(object sender, EventArgs e)
        {
            #region permission
            // Permission perm = new Permission();
            //refPermission modPermission = perm.get_permission_status_module("vehicles", );

            //List<vw_perm_function> page_permission = (List<vw_perm_function>)perm.get_perm_functions(((user_loginfo)Session["LoggedUser"]).role_id, "User_Roles");

            //foreach (vw_perm_function page_perm in page_permission)
            //{
            //    switch (page_perm.function)
            //    {
            //        case "create":
            //            break;
            //        default:
            //            break;
            //    }
            //}

            //if (modPermission.create == false)
            //{
            //    rgVehicles.MasterTableView.CommandItemDisplay = GridCommandItemDisplay.None;
            //}

            //if (modPermission.delete == false)
            //{
            //    rgVehicles.AutoGenerateDeleteColumn = false;
            //}

            //if (modPermission.modify == false)
            //{
            //    rgVehicles.AutoGenerateEditColumn = false;
            //}

            //if (modPermission.view == false)
            //{
            //    Response.Redirect("/Source/Child/Error_Page.aspx");
            //}

            #endregion
        }

        protected void RadUserRoles_ItemCommand(object sender, Telerik.Web.UI.GridCommandEventArgs e)
        {
            if (e.CommandName == RadGrid.UpdateCommandName && e.Item.OwnerTableView.Name == "det_mod")
            {

                GridDataItem item = e.Item as GridDataItem;
                string _func_id = (item["func_id"].Controls[0] as TextBox).Text;
                string _mod_per_id = (item["mod_per_id"].Controls[0] as TextBox).Text;
                bool _permission = (item["permission"].Controls[0] as CheckBox).Checked;
                Permission per = new Permission();
                refFUNCPermission modified_func_per = new refFUNCPermission()
                {
                    func_id = _func_id.strToInt(),
                    permission = _permission
                };

                per.update_permission(modified_func_per, _mod_per_id.strToInt());
            }

            if (e.CommandName == RadGrid.PerformInsertCommandName && e.Item.OwnerTableView.Name == "mas_role")
            {
                GridDataItem item = e.Item as GridDataItem;
                string _role = (item["role"].Controls[0] as TextBox).Text;
                string _description = (item["description"].Controls[0] as TextBox).Text;
                Permission perm = new Permission();
                perm.add_role(new tblRole() { user_id = Session["parent_id"].ToString().strToInt(), role = _role, description = _description });
            }

            if (e.CommandName == RadGrid.UpdateCommandName && e.Item.OwnerTableView.Name == "mas_role")
            {
                GridDataItem item = e.Item as GridDataItem;

                string _role = (item["role"].Controls[0] as TextBox).Text;
                string _description = (item["description"].Controls[0] as TextBox).Text;
                Permission perm = new Permission();

                //e.Item.OwnerTableView.DataKeyValues[0]["role_id"].ToString().strToInt()
                perm.update_role(item.GetDataKeyValue("role_id").ToString().strToInt(),
                    new tblRole() { user_id = Session["parent_id"].ToString().strToInt(), role = _role, description = _description });
            }

            RadUserRoles.MasterTableView.ClearEditItems();
        }

        protected void RadUserRoles_DetailTableDataBind(object sender, GridDetailTableDataBindEventArgs e)
        {
            GridDataItem dataItem = (GridDataItem)e.DetailTableView.ParentItem;
            Permission perm = new Permission();
            switch (e.DetailTableView.Name)
            {
                case "det_mod_per":

                    string role_id = dataItem.GetDataKeyValue("role_id").ToString();
                    e.DetailTableView.DataSource = perm.get_module_roles(role_id.strToInt());
                    break;
                case "det_mod":

                    string role_id2 = dataItem.GetDataKeyValue("role_id").ToString();
                    string mod_id = dataItem.GetDataKeyValue("mod_id").ToString();
                    e.DetailTableView.DataSource = perm.get_perm_functions(role_id2.strToInt(), mod_id.strToInt());
                    break;
                default:
                    break;
            }
        }
    }
}