using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using FMS.Child;
using FMS.Source.Classes;
using FMS_BusinessObjects;
using Telerik.Web.UI;
using System.Linq.Dynamic;

namespace FMS.Source.Child
{
    public partial class Drivers : System.Web.UI.Page
    {
        #region initial filter items
        List<filterMenu> vehicleFilterMenu = new List<filterMenu>();
        string[] filter_text = {
                                      "Employee ID",
                                      "First Name",
                                      "Last Name",
                                      "License No."
                               };
                                   //   ,
                                   //   "Mobile No.",
                                   //   "Home Address",
                                   //   "Gov't ID",
                                   //   "Gov't ID No.",
                                   //   "Salary Type",
                                   //   "Employee Status",                                      
                                   //   "License Type",
                                   //   "License Expiry Date"
                                   //};

        string[] filter_value = {
                                      "emp_id",
                                      "first_name",
                                      "last_name",
                                      "license_no"
                                };
                                    //  ,
                                    //  "mobile_no",
                                    //  "home_address",
                                    //  "gov_id",
                                    //  "gov_id_no",
                                    //  "salary_type",
                                    //  "emp_status",                                      
                                    //  "license_type",
                                    //  "license_expiry_date"
                                    //};
        #endregion

        protected void Page_Load(object sender, EventArgs e)
        {
            //Redirect page to login if session has expired
            if (((user_loginfo)Session["LoggedUser"]) == null)
            {
                Response.Redirect("/Login.aspx");
            }


            if (!IsPostBack)
                DRVDetailsPanel.Visible = false;

            //Populate the filter
            #region populate filter
            for (int i = 0; i < filter_value.Count(); i++)
            {
                vehicleFilterMenu.Add(new filterMenu
                {
                    DataText = filter_text[i],
                    DataValue = filter_value[i]
                });
            }
            rcmb_filter.DataSource = vehicleFilterMenu;
            if (IsPostBack == false)
            {
                rcmb_filter.DataBind();
            }
            #endregion

            //Enable/disable pages according to user permission
            #region check page permission of user
            //Permission perm = new Permission();
            //refPermission modPermission = perm.get_permission_status_module("drivers_record", ((user_loginfo)Session["LoggedUser"]).role_id);
            //if (modPermission.create == false)
            //{
            //    RadDriver.MasterTableView.CommandItemDisplay = GridCommandItemDisplay.None;
            //}

            //if (modPermission.delete == false)
            //{
            //    //RadDriver.MasterTableView.GetColumn("Delete_Column").Display = false;
            //    RadDriver.AutoGenerateDeleteColumn = false;
            //}

            //if (modPermission.modify == false)
            //{
            //    RadDriver.AutoGenerateEditColumn = false;
            //}

            //if (modPermission.view == false)
            //{
            //    Response.Redirect("/Source/Child/Error_Page.aspx");
            //}
            #endregion
        }

        private void filter()
        {
            Driver drv = new Driver();
            RadDriver.DataSource = drv.filter_driver(rcmb_filter.SelectedValue, tbx_filter.Text, Session["parent_id"].ToString());
            RadDriver.Rebind();
        }
        protected void RadButton1_Click(object sender, EventArgs e)
        {
            filter();
        }


        protected void RadDriver_ItemCommand(object sender, GridCommandEventArgs e)
        {
            if (e.CommandName == "Select")
            {
                Permission perm = new Permission();
                if (perm.is_allowed("Driver", "view", Session["role_id"].ToString().strToInt()) == true)
                {
                    GridDataItem dataItem = e.Item as GridDataItem;
                    Violation vio = new Violation();


                    int _drv_id = Convert.ToInt32(dataItem.GetDataKeyValue("drv_id").ToString());
                    RadViolation.DataSource = vio.get_driver_violation(_drv_id);
                    RadViolation.Rebind();

                    Session["drv_id"] = _drv_id;
                    Driver drv = new Driver();
                    DetDriver.DataSource = drv.get_driver_detail(_drv_id);
                    DetDriver.DataBind();

                    load_image();

                    DRVDetailsPanel.Visible = true;
                }
                else
                {
                    ScriptManager.RegisterStartupScript(Page, Page.GetType(), "View Driver Details", "alert('You are not allowed to view Driver Details!');", true);
                }
            }

            if (e.CommandName == "Flag")
            {
                GridDataItem item = e.Item as GridDataItem;
                string drv_id = item.GetDataKeyValue("drv_id").ToString();
                string strflagged = item["flag"].Text;
                bool flagged = (strflagged == "True" || strflagged == "1") ? false : true; //intended to be interchanged because this will be the new status
                Driver drv = new Driver();
                drv.update_driver_flag(flagged, string.Empty, Convert.ToInt32(drv_id));
                RadDriver.Rebind();
            }
        }


        protected void btnResetFilter_Click(object sender, EventArgs e)
        {
            tbx_filter.Text = "";
            FMS_DBDataContext datacontext = new FMS_DBDataContext();
            RadDriver.DataSource = datacontext.tblDrivers.Where(x => x.usr_id == Convert.ToInt32(Session["parent_id"].ToString()));
            RadDriver.DataBind();
        }


        protected void RadDriver_NeedDataSource(object sender, GridNeedDataSourceEventArgs e)
        {
            Driver drv = new Driver();
            RadDriver.DataSource = drv.get_user_driver(Session["parent_id"].ToString().strToInt());
        }

        protected void DetDriver_ItemCreated(object sender, EventArgs e)
        {
            Permission perm = new Permission();
            if (perm.is_allowed("Driver", "modify", Session["role_id"].ToString().strToInt()) == true)
            {
                EditDRVLink.Attributes["href"] = "javascript:void(0);";
                string drvid = "";
                drvid = DetDriver.DataKey.Value.ToString();
                //svid = e.Item.OwnerTableView.DataKeyValues[e.Item.ItemIndex]["vid"].ToString();
                EditDRVLink.Attributes["onclick"] = String.Format("return ShowEditFormDriver('{0}');", drvid);
            }
        }

        protected void RadAjaxManager1_AjaxRequest(object sender, AjaxRequestEventArgs e)
        {

            int drv_id = Session["drv_id"].ToString().strToInt();

            Driver drv = new Driver();
            RadDriver.DataSource = drv.get_user_driver(Session["parent_id"].ToString().strToInt());
            RadDriver.Rebind();

            drv = new Driver();
            DetDriver.DataSource = drv.get_driver_detail(drv_id);
            DetDriver.DataBind();

            Violation vio = new Violation();
            RadViolation.DataSource = vio.get_driver_violation(drv_id);
            RadViolation.DataBind();

            DRVDetailsPanel.Visible = true;

            load_image();
        }

        private void load_image()
        {
            int drv_id = Session["drv_id"].ToString().strToInt();
            Driver drv = new Driver();
            if (drv.has_driver_image(drv_id) == true)
            {
                imgDriver.ImageUrl = "~/Source/Details/ImageHandler.ashx?type=driver&id=" + drv_id + "&time=" + DateTime.Now.Ticks.ToString();
            }

            else
            {
                imgDriver.ImageUrl = Page.ResolveUrl("~/Design/driver_pg_images/drv_unavailable.png");
            }
        }
        string drv_vio_id;
        protected void RadViolation_ItemCreated(object sender, GridItemEventArgs e)
        {
            if (e.Item is GridDataItem)
            {
                Permission perm = new Permission();
                if (perm.is_allowed("Violation", "modify", Session["role_id"].ToString().strToInt()) == true)
                {
                    HyperLink TrackLink = (HyperLink)e.Item.FindControl("EditLink");
                    TrackLink.Attributes["href"] = "javascript:void(0);";
                    drv_vio_id = e.Item.OwnerTableView.DataKeyValues[e.Item.ItemIndex]["drv_vio_id"].ToString();

                    TrackLink.Attributes["onclick"] = String.Format("return ShowEditFormViolation('{0}');", drv_vio_id);
                }
            }
        }
        string drvFlag = "";
        protected void RadDriver_ItemDataBound(object sender, GridItemEventArgs e)
        {
            if (e.Item is GridDataItem)
            {
                GridDataItem item = (GridDataItem)e.Item;
                string strflagged = item["flag"].Text;
                bool flagged = (strflagged == "True" || strflagged == "1") ? true : false;
                if (flagged)
                {
                    ImageButton img = (ImageButton)item["btn_flag"].Controls[0];
                    img.ImageUrl = "~/Design/flagging_images/flagged.png";
                    img.ToolTip = "Unflag";
                }
                Permission perm = new Permission();
                if (perm.is_allowed("driver", "modify", Session["role_id"].ToString().strToInt()) == true)
                {
                    if (!flagged)
                    {
                        ImageButton imgFlag = (ImageButton)item["btn_flag"].Controls[0];
                        imgFlag.Attributes["href"] = "javascript:void(0);";
                        imgFlag.CommandName = string.Empty;
                        drvFlag = e.Item.OwnerTableView.DataKeyValues[e.Item.ItemIndex]["drv_id"].ToString();
                        imgFlag.Attributes["onclick"] = String.Format("return ShowFlagForm('{0}','DRV');", drvFlag);
                    }
                    else
                    {
                        ImageButton imgFlag = (ImageButton)item["btn_flag"].Controls[0];
                        imgFlag.Attributes["href"] = "return true;";
                        imgFlag.CommandName = "Flag";
                    }
                }
            }
        }
    }
}