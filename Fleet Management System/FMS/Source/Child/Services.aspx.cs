using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using FMS.Child;
using FMS.Source.Classes;
using FMS_BusinessObjects;
using Telerik.Web.UI;

namespace FMS.Source.Child
{
    public partial class Services : System.Web.UI.Page
    {
        #region initial filter items
        List<filterMenu> vehicleFilterMenu = new List<filterMenu>();
        string[] filter_text = {  "Service ID",
                                  "Service Type",
                                  "Service Date",
                                  "Completion Date",
                                  "Serviced By",
                                  "Remarks",
                                  "Vehicle Name"
                               };

        string[] filter_value = {  "vhc_srv_id",
                                  "service",
                                  "date_service",
                                  "date_completion",
                                  "srv_by",
                                  "remarks",
                                  "vid"
                                };
        #endregion

        protected void Page_Load(object sender, EventArgs e)
        {
            //Redirect page to login if session has expired
            if (((user_loginfo)Session["LoggedUser"]) == null)
            {
                Response.Redirect("/Login.aspx");
            }

            //Populate filter menu
            #region populate filter
            for (int i = 0; i < filter_value.Count(); i++)
            {
                vehicleFilterMenu.Add(new filterMenu
                {
                    DataText = filter_text[i],
                    DataValue = filter_value[i]
                });
            }
            rcmb_filter.DataSource = vehicleFilterMenu;
            if (IsPostBack == false)
            {
                rcmb_filter.DataBind();
            }
            #endregion


            //Enable disable pages based on user permission
            #region user permission
            Permission perm = new Permission();
            refPermission modPermission = perm.get_permission_status_module("service_logs", ((user_loginfo)Session["LoggedUser"]).role_id);
            Vehicle veh = new Vehicle();
            //if (!IsPostBack)
            //{
            //    RadGridVHCServices.DataSourceID = null;
            //    RadGridVHCServices.DataSource = veh.get_veh_srv(((user_loginfo)Session["LoggedUser"]).parent_id);
            //}

            linq_vehicle.Where = "vid == vid";
            linq_vehicle.Where = veh.get_user_vehicles(((user_loginfo)Session["LoggedUser"]).parent_id);

            if (modPermission.create == false)
            {
                RadGridVHCServices.MasterTableView.CommandItemDisplay = GridCommandItemDisplay.None;
            }

            if (modPermission.delete == false)
            {
                RadGridVHCServices.MasterTableView.GetColumn("Delete_Column").Display = false;
                RadGridVHCServices.AutoGenerateDeleteColumn = false;
            }

            if (modPermission.modify == false)
            {
                RadGridVHCServices.AutoGenerateEditColumn = false;
            }

            if (modPermission.view == false)
            {
                Response.Redirect("/Source/Child/Error_Page.aspx");
            }
            #endregion
        }

        //Manually commit on insert/edit/delete changes
        protected void RadGridVHCServices_ItemCommand(object sender, GridCommandEventArgs e)
        {

            if (e.CommandName == RadGrid.UpdateCommandName)
            {
                GridEditableItem editItem = e.Item as GridEditableItem;
                RadDatePicker serviceDate = (RadDatePicker)editItem.FindControl("rdpServicedate");
                RadDatePicker completionDate = (RadDatePicker)editItem.FindControl("rdpCompletiondate");
                RadTextBox vhc_srv_id = (RadTextBox)editItem.FindControl("tbxVhcSrvId");
                RadTextBox remarks = (RadTextBox)editItem.FindControl("tbxRemarks");
                RadTextBox servicedby = (RadTextBox)editItem.FindControl("tbxServicedby");
                RadTextBox tbxServiceReceiptNo = (RadTextBox)editItem.FindControl("tbxServiceReceiptNo");
                RadComboBox srv_id = (RadComboBox)editItem.FindControl("rcmbServiceType");
                RadComboBox vid = (RadComboBox)editItem.FindControl("rcmbVehicle");
                RadComboBox brought_by = (RadComboBox)editItem.FindControl("rcmbBroughtby");
                Vehicle veh = new Vehicle();
                veh.save_vehicle_service(Convert.ToInt32(vhc_srv_id.Text), serviceDate.SelectedDate ?? DateTime.Now, completionDate.SelectedDate ?? DateTime.Now, Convert.ToInt32(srv_id.SelectedValue), 
                    servicedby.Text, remarks.Text, Convert.ToInt32(vid.SelectedValue),Convert.ToInt32(brought_by.SelectedValue),tbxServiceReceiptNo.Text);
                RadGridVHCServices.MasterTableView.ClearEditItems();
            }

            if (e.CommandName == RadGrid.PerformInsertCommandName)
            {
                GridEditableItem editItem = e.Item as GridEditableItem;

                RadDatePicker serviceDate = (RadDatePicker)editItem.FindControl("rdpServicedate");
                RadDatePicker completionDate = (RadDatePicker)editItem.FindControl("rdpCompletiondate");
                RadTextBox vhc_srv_id = (RadTextBox)editItem.FindControl("tbxVhcSrcId");
                RadTextBox remarks = (RadTextBox)editItem.FindControl("tbxRemarks");
                RadTextBox servicedby = (RadTextBox)editItem.FindControl("tbxServicedby");
                RadComboBox srv_id = (RadComboBox)editItem.FindControl("rcmbServiceType");
                RadComboBox vid = (RadComboBox)editItem.FindControl("rcmbVehicle");
                RadTextBox tbxServiceReceiptNo = (RadTextBox)editItem.FindControl("tbxServiceReceiptNo");
                RadComboBox brought_by = (RadComboBox)editItem.FindControl("rcmbBroughtby");
                Vehicle veh = new Vehicle();
                veh.add_vehicle_service(DateTime.Parse(serviceDate.DateInput.DisplayText), DateTime.Parse(completionDate.DateInput.DisplayText), Convert.ToInt32(srv_id.SelectedValue), 
                    servicedby.Text, remarks.Text, Convert.ToInt32(vid.SelectedValue),Convert.ToInt32(brought_by.SelectedValue),tbxServiceReceiptNo.Text);
                RadGridVHCServices.Rebind();
            }

            if (e.CommandName == "Delete")
            {
                GridDataItem dataItem = e.Item as GridDataItem;

                string vhc_srv_id = dataItem.GetDataKeyValue("vhc_srv_id").ToString();
                Vehicle veh = new Vehicle();
                veh.delete_vehicle_service(Convert.ToInt32(vhc_srv_id));
            }



            if (e.CommandName == "ExportToExcel")
            {
                filter();
                format = "excel";
            }
            else if (e.CommandName == "ExportToPdf")
            {
                filter();
                format = "pdf";
            }
        }

        private void filter()
        {
            FMS_DBDataContext datacontext = new FMS_DBDataContext();
            List<vw_vehicle_service> vhcsrvList = datacontext.vw_vehicle_services.Where(x => x.usr_id == Convert.ToInt32(Session["parent_id"].ToString())).ToList();
            switch (rcmb_filter.SelectedValue)
            {
                case "vhc_srv_id":
                    RadGridVHCServices.DataSource = vhcsrvList.Where(x => x.vhc_srv_id.ToString().ToLower().Contains(tbx_filter.Text.ToLower())).ToList();
                    break;
                case "service":
                    RadGridVHCServices.DataSource = vhcsrvList.Where(x => x.service.ToLower().Contains(tbx_filter.Text.ToLower())).ToList();
                    break;

                case "date_started":
                    RadGridVHCServices.DataSource = vhcsrvList.Where(x => x.date_started.ToString().Contains(tbx_filter.Text)).ToList();
                    break;
                case "date_completed":
                    RadGridVHCServices.DataSource = vhcsrvList.Where(x => x.date_completed.ToString().Contains(tbx_filter.Text)).ToList();
                    break;
                case "srv_by":
                    RadGridVHCServices.DataSource = vhcsrvList.Where(x => x.srv_by.ToLower().Contains(tbx_filter.Text.ToLower())).ToList();
                    break;
                case "remarks":
                    RadGridVHCServices.DataSource = vhcsrvList.Where(x => x.remarks.ToLower().Contains(tbx_filter.Text.ToLower())).ToList();
                    break;
                case "vid":
                    RadGridVHCServices.DataSource = vhcsrvList.Where(x => x.vid.ToString().Contains(tbx_filter.Text)).ToList();
                    break;
                default:
                    break;
            }
            RadGridVHCServices.DataBind();

        }

        //Method to filter output
        protected void RadButton1_Click(object sender, EventArgs e)
        {
            filter();
        }

        //Initiate the radgrid output
        protected void RadGridVHCServices_NeedDataSource(object sender, GridNeedDataSourceEventArgs e)
        {
            FMS_DBDataContext datacontext = new FMS_DBDataContext();
            RadGridVHCServices.DataSource = datacontext.vw_vehicle_services.Where(x => x.usr_id == Convert.ToInt32(Session["parent_id"].ToString())).ToList();
        }

        protected void RadGridVHCServices_PreRender(object sender, EventArgs e)
        {
            if (RadGridVHCServices.EditItems.Count > 0)
            {
                foreach (GridDataItem item in RadGridVHCServices.MasterTableView.Items)
                {
                    if (item != RadGridVHCServices.EditItems[0])
                    {
                        item.Visible = false;
                    }
                }
            }
        }
        //Reset filter
        protected void btnResetFilter_Click(object sender, EventArgs e)
        {
            tbx_filter.Text = "";
            FMS_DBDataContext datacontext = new FMS_DBDataContext();
            RadGridVHCServices.DataSource = datacontext.vw_vehicle_services.Where(x => x.usr_id == Convert.ToInt32(Session["parent_id"].ToString())).ToList();
            RadGridVHCServices.Rebind();
        }

        string format = "";
        protected void RadGridVHCServices_ItemCreated(object sender, GridItemEventArgs e)
        {
            
            if (e.Item is GridEditFormItem && e.Item.IsInEditMode)//if the item is in edit mode
            {
                GridEditFormItem editItem = (GridEditFormItem)e.Item;
                RadComboBox combo = (RadComboBox)editItem.FindControl("rcmbServiceType");
                combo.Items.Add(new RadComboBoxItem("Add New Service", "0"));
                combo.AutoPostBack = true;
                combo.SelectedIndexChanged += new RadComboBoxSelectedIndexChangedEventHandler(combo_SelectedIndexChanged);

                //RadButton btnNewService = (RadButton)editItem.FindControl("btnNewService");
                //btnNewService.AutoPostBack = true;
                //btnNewService.Click += new EventHandler(btnNewService_Click);
            }
            if (e.Item is GridEditFormInsertItem && e.Item.OwnerTableView.IsItemInserted)//if the item is in insert mode
            {
                GridEditFormInsertItem insertItem = (GridEditFormInsertItem)e.Item;
                RadComboBox combo = (RadComboBox)insertItem.FindControl("rcmbServiceType");
                combo.AutoPostBack = true;
                combo.SelectedIndexChanged += new RadComboBoxSelectedIndexChangedEventHandler(combo_SelectedIndexChanged);
            }

            #region Export Functions
            GridItem item = e.Item;
            if (format == "excel")
            {
                if (item is GridHeaderItem)
                    foreach (TableCell cell in item.Cells)
                    {
                        cell.Style["font-family"] = "Verdana";
                        cell.Style["text-align"] = "center";
                        cell.Style["font-size"] = "10pt";
                        item.Style["background-color"] = "#3588be";
                    }
                else if (item is GridDataItem)
                {
                    item.Style["font-family"] = "Times New Roman";
                    item.Style["vertical-align"] = "middle";
                    item.Style["text-align"] = "center";
                    item.Style["font-size"] = "11pt";
                    item.Style["background-color"] = item.ItemType == GridItemType.AlternatingItem ? "#DDDDDD" : "#ffffff";
                }
            }
            else if (format == "pdf")
            {
                if (item is GridHeaderItem)
                    foreach (TableCell cell in item.Cells)
                    {
                        cell.Style["font-family"] = "Verdana";
                        cell.Style["text-align"] = "center";
                        cell.Style["font-size"] = "6pt";
                        item.Style["background-color"] = "#3588be";
                    }
                else if (item is GridDataItem)
                {
                    item.Style["font-family"] = "Times New Roman";
                    item.Style["vertical-align"] = "middle";
                    item.Style["text-align"] = "center";
                    item.Style["font-size"] = "8pt";
                    item.Style["background-color"] = item.ItemType == GridItemType.AlternatingItem ? "#DDDDDD" : "#ffffff";
                }
            }
            #endregion
        }

        protected void btnNewService_Click(object sender, EventArgs e)
        {
            Validate();
            FMS_DBDataContext datacontext = new FMS_DBDataContext();

            GridEditableItem item = (GridEditableItem)(sender as RadButton).NamingContainer;
            RadTextBox tbxService = (RadTextBox)item.FindControl("tbxNewService");
            RadComboBox cmbService = (RadComboBox)item.FindControl("rcmbServiceType");
            if (tbxService.Text.Trim() != "")
            {
                string newService = tbxService.Text.Trim().ToLower();
                int _parent = Convert.ToInt32(Session["parent_id"].ToString());
                if (datacontext.refServices.Where(x => x.service.Trim().ToLower().Contains(newService) && x.usr_id == _parent).Count() == 0)
                {
                    refService srv = new refService()
                    {
                        usr_id = Convert.ToInt32(Session["parent_id"]),
                        service = tbxService.Text.Trim(),
                        active = true
                    };

                    datacontext.refServices.InsertOnSubmit(srv);
                    datacontext.SubmitChanges();

                    RadGridVHCServices.Rebind();
                    Page.ClientScript.RegisterStartupScript(this.GetType(), "New Service", "alert('Service " + tbxService.Text + " has been added.');", true);
                }
            }
        }

        private void combo_SelectedIndexChanged(object sender, RadComboBoxSelectedIndexChangedEventArgs e)
        {
            RadComboBox rcmbService = sender as RadComboBox;
            GridEditableItem item = (GridEditableItem)(sender as RadComboBox).NamingContainer;
            //string emp = item["FirstName"].Text.ToString();
            RadTextBox tbxService = (RadTextBox)item.FindControl("tbxNewService");
            RadButton btnService = (RadButton)item.FindControl("btnNewService");
            if (rcmbService.Text.ToString().ToLower().Contains("add new service"))
            {
                tbxService.Visible = true;
                btnService.Visible = true;
            }
            else
            {
                tbxService.Visible = false;
                btnService.Visible = false;
            }

        }

        protected void srvCusValidator_ServerValidate(object source, ServerValidateEventArgs args)
        {
            
            FMS_DBDataContext datacontext = new FMS_DBDataContext();
            GridEditableItem item = (GridEditableItem)(source as CustomValidator).NamingContainer;
            RadTextBox tbxService = (RadTextBox)item.FindControl("tbxNewService");
            string newService = tbxService.Text.Trim().ToLower();
            int _parent = Convert.ToInt32(Session["parent_id"].ToString());
            if (datacontext.refServices.Where(x => x.service.ToLower().Contains(newService) && x.usr_id == _parent).ToList().Count() == 0)
            {
                args.IsValid = true;
            }
            else
            {
                args.IsValid = false;
            }
        }


    }
}